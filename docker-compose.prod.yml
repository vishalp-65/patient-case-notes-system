version: '3.8'

# Production Docker Compose Configuration
# This file is for reference and production deployment
# Use docker-compose.yml for development

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: patient-notes-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-patient_notes_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init-prod.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - patient-notes-prod-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: patient-notes-redis-prod
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - patient-notes-prod-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Zookeeper (Production)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: patient-notes-zookeeper-prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - patient-notes-prod-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '2181']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Kafka (Production)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: patient-notes-kafka-prod
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '${KAFKA_PORT:-9092}:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${KAFKA_HOST:-localhost}:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    networks:
      - patient-notes-prod-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'kafka-broker-api-versions',
          '--bootstrap-server',
          'localhost:9092',
        ]
      interval: 30s
      timeout: 15s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  patient-notes-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
